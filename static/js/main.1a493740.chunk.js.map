{"version":3,"sources":["Post.js","firebase.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["Post","username","caption","imageUrl","className","Avatar","alt","src","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","ImageUpload","useState","setImage","setCaption","type","placeholder","onChange","e","target","value","files","Button","onClick","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","React","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","password","setPassword","email","setEmail","user","setUser","useEffect","unsubscribe","onAuthStateChanged","authUser","console","log","collection","onSnapshot","snaphot","docs","map","doc","id","post","data","Modal","onClose","style","Input","event","preventDefault","createUserWithEmailAndPassword","then","updateProfile","displayName","catch","error","alert","message","signInWithEmailAndPassword","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a493740.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nfunction Post({ username, caption, imageUrl }) {\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post__header\">\r\n        <Avatar className=\"post__avatar\" alt=\"vinayparmar\" src=\"/\" />\r\n        <h3>{username}</h3>\r\n      </div>\r\n\r\n      <img className=\"post__image\" src={imageUrl} />\r\n      <h4 className=\"post__text\">\r\n        <strong>{username}</strong> {caption}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCCnqvaW-UmazylDzGK5-ncvuhURVrokWg\",\r\n  authDomain: \"instagram-cbbc8.firebaseapp.com\",\r\n  databaseURL: \"https://instagram-cbbc8.firebaseio.com\",\r\n  projectId: \"instagram-cbbc8\",\r\n  storageBucket: \"instagram-cbbc8.appspot.com\",\r\n  messagingSenderId: \"873304111428\",\r\n  appId: \"1:873304111428:web:16666bfcf530a94a6dbf11\",\r\n  measurementId: \"G-HG59MVSB9M\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import React, {useState} from 'react'\r\nimport { Button } from '@material-ui/core'\r\n\r\nfunction ImageUpload() {\r\n\r\n    const [image, setImage] = useState(null)\r\n    const [progress, setProgress] = useState(0)\r\n    const [caption, setCaption] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        if(e.target.files[0]) {\r\n            setImage(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleUpload = () => {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n          {/* want to have... */}\r\n          {/* caption input */}\r\n          {/* file picker */}\r\n          {/* post button */}\r\n\r\n          <input type=\"text\" placeholder=\"Enter a caption...\"  onChange={e => setCaption(e.target.value)} value={caption}/>\r\n          <input type=\"file\" onChange={handleChange} />\r\n          <Button onClick={handleUpload}>Upload</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Post from \"./Post\";\r\nimport { db, auth } from \"./firebase\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { Button, Input } from \"@material-ui/core\";\r\nimport ImageUpload from \"./ImageUpload\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: \"270\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n\r\n  const [posts, setPosts] = React.useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openSignIn, setOpenSignIn] = React.useState(\"\");\r\n  const [username, setUsername] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [user, setUser] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // user logged in...\r\n        console.log(authUser);\r\n        setUser(authUser);\r\n      } else {\r\n        setUser(null);\r\n        // user logged out...\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      // Perform some cleanup actions\r\n      unsubscribe();\r\n    };\r\n  }, [user, username]);\r\n\r\n  React.useEffect(() => {\r\n    db.collection(\"posts\").onSnapshot((snaphot) => {\r\n      setPosts(\r\n        snaphot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          post: doc.data(),\r\n        }))\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  const signUp = (event) => {\r\n    event.preventDefault();\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((authUser) => {\r\n        return authUser.user.updateProfile({\r\n          displayName: username,\r\n        });\r\n      })\r\n      .catch((error) => alert(error.message));\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const signIn = (event) => {\r\n    event.preventDefault();\r\n\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((error) => alert(error.message));\r\n\r\n    setOpenSignIn(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <ImageUpload />\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)}>\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <form className=\"app__signup\">\r\n            <center>\r\n              <img\r\n                className=\"app__headerImage\"\r\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\r\n                alt=\"\"\r\n              />\r\n\r\n              <Input\r\n                placeholder=\"username\"\r\n                type=\"type\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n\r\n              <Input\r\n                placeholder=\"email\"\r\n                type=\"type\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n\r\n              <Input\r\n                placeholder=\"password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button className=\"log__button\" type=\"submit\" onClick={signUp}>\r\n                Sign Up\r\n              </Button>\r\n            </center>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <form className=\"app__signup\">\r\n            <center>\r\n              <img\r\n                className=\"app__headerImage\"\r\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\r\n                alt=\"\"\r\n              />\r\n\r\n              <Input\r\n                placeholder=\"email\"\r\n                type=\"type\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n\r\n              <Input\r\n                placeholder=\"password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button className=\"log__button\" type=\"submit\" onClick={signIn}>\r\n                Sign In\r\n              </Button>\r\n            </center>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n\r\n      <div className=\"app__header\">\r\n        <img\r\n          className=\"app__headerImage\"\r\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n\r\n      {user ? (\r\n        <Button onClick={() => auth.signOut()}>Logout</Button>\r\n      ) : (\r\n        <div className=\"app__loginContainer\">\r\n          <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\r\n          <Button onClick={() => setOpen(true)}>Sign Up</Button>\r\n        </div>\r\n      )}\r\n\r\n      <h1>Hello</h1>\r\n\r\n      {posts.map(({ id, post }) => (\r\n        <Post\r\n          key={id}\r\n          username={post.username}\r\n          caption={post.caption}\r\n          imageUrl={post.imageUrl}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}